<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!-- 将多个配置文件读取到容器中，交给Spring管理 -->
    <bean id="propertyConfigurer"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:jdbc.properties</value>
            </list>
        </property>
    </bean>

    <!-- 扫描类包，将标注Spring注解的类自动转化Bean，同时完成Bean的注入 -->
    <context:component-scan base-package="org.hqf.tutorials.spring.service"/>
    <context:component-scan base-package="org.hqf.tutorials.spring.dao"/>

    <!--master 配置数据源 -->
    <bean id="masterDataSource" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">
        <property name="driverClassName">
            <value>${master.jdbc.driverClassName}</value>
        </property>
        <property name="url">
            <value>${master.jdbc.url}</value>
        </property>
        <property name="username">
            <value>${master.jdbc.username}</value>
        </property>
        <property name="password">
            <value>${master.jdbc.password}</value>
        </property>

        <!-- 通过别名的方式配置扩展插件，常用的插件有：监控统计用的filter:stat 日志用的filter:log4j 防御sql注入的filter:wall -->
        <property name="filters" value="stat,log4j"/>
        <!-- 最大并发连接数 -->
        <property name="maxActive" value="30"/>
        <!-- 初始化连接数量 -->
        <property name="initialSize" value="5"/>
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000"/>
        <!-- 最小空闲连接数 -->
        <property name="minIdle" value="5"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000"/>
        <property name="validationQuery" value="SELECT 'x'"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>
        <property name="poolPreparedStatements" value="false"/>
        <property name="maxOpenPreparedStatements" value="100"/>
        <!-- 打开removeAbandoned功能(连接泄漏监测，怀疑存在泄漏之后再打开) -->
        <property name="removeAbandoned" value="true"/>
        <!-- 1800秒，也就是30分钟 -->
        <property name="removeAbandonedTimeout" value="1800"/>
        <!-- 关闭abanded连接时输出错误日志 -->
        <property name="logAbandoned" value="true"/>
    </bean>

    <!--slave 配置数据源 -->
    <bean id="slaveDataSource" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">
        <property name="driverClassName">
            <value>${slave.jdbc.driverClassName}</value>
        </property>
        <property name="url">
            <value>${slave.jdbc.url}</value>
        </property>
        <property name="username">
            <value>${slave.jdbc.username}</value>
        </property>
        <property name="password">
            <value>${slave.jdbc.password}</value>
        </property>

        <!-- 通过别名的方式配置扩展插件，常用的插件有：监控统计用的filter:stat 日志用的filter:log4j 防御sql注入的filter:wall -->
        <!-- <property name="filters" value="stat,log4j" /> -->
        <property name="proxyFilters">
            <list>
                <ref bean="stat-filter"/>
                <ref bean="log-filter"/>
            </list>
        </property>
        <!-- 最大并发连接数 -->
        <property name="maxActive" value="30"/>
        <!-- 初始化连接数量 -->
        <property name="initialSize" value="5"/>
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000"/>
        <!-- 最小空闲连接数 -->
        <property name="minIdle" value="5"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000"/>
        <property name="validationQuery" value="SELECT 'x'"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>
        <property name="poolPreparedStatements" value="false"/>
        <property name="maxOpenPreparedStatements" value="100"/>
        <!-- 打开removeAbandoned功能(连接泄漏监测，怀疑存在泄漏之后再打开) -->
        <property name="removeAbandoned" value="true"/>
        <!-- 1800秒，也就是30分钟 -->
        <property name="removeAbandonedTimeout" value="1800"/>
        <!-- 关闭abanded连接时输出错误日志 -->
        <property name="logAbandoned" value="true"/>
    </bean>

    <!--goldMaster 配置数据源 -->
    <!--<bean id="goldMasterDataSource" class="com.alibaba.druid.pool.DruidDataSource"-->
          <!--init-method="init" destroy-method="close">-->
        <!--<property name="driverClassName">-->
            <!--<value>${goldMaster.jdbc.driverClassName}</value>-->
        <!--</property>-->
        <!--<property name="url">-->
            <!--<value>${goldMaster.jdbc.url}</value>-->
        <!--</property>-->
        <!--<property name="username">-->
            <!--<value>${goldMaster.jdbc.username}</value>-->
        <!--</property>-->
        <!--<property name="password">-->
            <!--<value>${goldMaster.jdbc.password}</value>-->
        <!--</property>-->

        <!--&lt;!&ndash; 通过别名的方式配置扩展插件，常用的插件有：监控统计用的filter:stat 日志用的filter:log4j 防御sql注入的filter:wall &ndash;&gt;-->
        <!--&lt;!&ndash; <property name="filters" value="stat,log4j" /> &ndash;&gt;-->
        <!--<property name="proxyFilters">-->
            <!--<list>-->
                <!--<ref bean="stat-filter"/>-->
                <!--&lt;!&ndash;<ref bean="log-filter"/>&ndash;&gt;-->
            <!--</list>-->
        <!--</property>-->
        <!--&lt;!&ndash; 最大并发连接数 &ndash;&gt;-->
        <!--<property name="maxActive" value="30"/>-->
        <!--&lt;!&ndash; 初始化连接数量 &ndash;&gt;-->
        <!--<property name="initialSize" value="5"/>-->
        <!--&lt;!&ndash; 配置获取连接等待超时的时间 &ndash;&gt;-->
        <!--<property name="maxWait" value="60000"/>-->
        <!--&lt;!&ndash; 最小空闲连接数 &ndash;&gt;-->
        <!--<property name="minIdle" value="5"/>-->
        <!--&lt;!&ndash; 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 &ndash;&gt;-->
        <!--<property name="timeBetweenEvictionRunsMillis" value="60000"/>-->
        <!--&lt;!&ndash; 配置一个连接在池中最小生存的时间，单位是毫秒 &ndash;&gt;-->
        <!--<property name="minEvictableIdleTimeMillis" value="300000"/>-->
        <!--<property name="validationQuery" value="SELECT 'x'"/>-->
        <!--<property name="testWhileIdle" value="true"/>-->
        <!--<property name="testOnBorrow" value="false"/>-->
        <!--<property name="testOnReturn" value="false"/>-->
        <!--<property name="poolPreparedStatements" value="false"/>-->
        <!--<property name="maxOpenPreparedStatements" value="100"/>-->
        <!--&lt;!&ndash; 打开removeAbandoned功能(连接泄漏监测，怀疑存在泄漏之后再打开) &ndash;&gt;-->
        <!--<property name="removeAbandoned" value="true"/>-->
        <!--&lt;!&ndash; 1800秒，也就是30分钟 &ndash;&gt;-->
        <!--<property name="removeAbandonedTimeout" value="1800"/>-->
        <!--&lt;!&ndash; 关闭abanded连接时输出错误日志 &ndash;&gt;-->
        <!--<property name="logAbandoned" value="true"/>-->
    <!--</bean>-->

    <!--goldSlave 配置数据源 -->
    <!--<bean id="goldSlaveDataSource" class="com.alibaba.druid.pool.DruidDataSource"-->
          <!--init-method="init" destroy-method="close">-->
        <!--<property name="driverClassName">-->
            <!--<value>${goldSlave.jdbc.driverClassName}</value>-->
        <!--</property>-->
        <!--<property name="url">-->
            <!--<value>${goldSlave.jdbc.url}</value>-->
        <!--</property>-->
        <!--<property name="username">-->
            <!--<value>${goldSlave.jdbc.username}</value>-->
        <!--</property>-->
        <!--<property name="password">-->
            <!--<value>${goldSlave.jdbc.password}</value>-->
        <!--</property>-->

        <!--&lt;!&ndash; 通过别名的方式配置扩展插件，常用的插件有：监控统计用的filter:stat 日志用的filter:log4j 防御sql注入的filter:wall &ndash;&gt;-->
        <!--&lt;!&ndash; <property name="filters" value="stat,log4j" /> &ndash;&gt;-->
        <!--<property name="proxyFilters">-->
            <!--<list>-->
                <!--<ref bean="stat-filter"/>-->
                <!--&lt;!&ndash;<ref bean="log-filter"/>&ndash;&gt;-->
            <!--</list>-->
        <!--</property>-->
        <!--&lt;!&ndash; 最大并发连接数 &ndash;&gt;-->
        <!--<property name="maxActive" value="30"/>-->
        <!--&lt;!&ndash; 初始化连接数量 &ndash;&gt;-->
        <!--<property name="initialSize" value="5"/>-->
        <!--&lt;!&ndash; 配置获取连接等待超时的时间 &ndash;&gt;-->
        <!--<property name="maxWait" value="60000"/>-->
        <!--&lt;!&ndash; 最小空闲连接数 &ndash;&gt;-->
        <!--<property name="minIdle" value="5"/>-->
        <!--&lt;!&ndash; 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 &ndash;&gt;-->
        <!--<property name="timeBetweenEvictionRunsMillis" value="60000"/>-->
        <!--&lt;!&ndash; 配置一个连接在池中最小生存的时间，单位是毫秒 &ndash;&gt;-->
        <!--<property name="minEvictableIdleTimeMillis" value="300000"/>-->
        <!--<property name="validationQuery" value="SELECT 'x'"/>-->
        <!--<property name="testWhileIdle" value="true"/>-->
        <!--<property name="testOnBorrow" value="false"/>-->
        <!--<property name="testOnReturn" value="false"/>-->
        <!--<property name="poolPreparedStatements" value="false"/>-->
        <!--<property name="maxOpenPreparedStatements" value="100"/>-->
        <!--&lt;!&ndash; 打开removeAbandoned功能(连接泄漏监测，怀疑存在泄漏之后再打开) &ndash;&gt;-->
        <!--<property name="removeAbandoned" value="true"/>-->
        <!--&lt;!&ndash; 1800秒，也就是30分钟 &ndash;&gt;-->
        <!--<property name="removeAbandonedTimeout" value="1800"/>-->
        <!--&lt;!&ndash; 关闭abanded连接时输出错误日志 &ndash;&gt;-->
        <!--<property name="logAbandoned" value="true"/>-->
    <!--</bean>-->

    <!-- 慢SQL记录 -->
    <bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">
        <property name="mergeSql" value="true"/>
        <!-- 3000毫秒，也就是3秒 -->
        <property name="slowSqlMillis" value="3000"/>
        <property name="logSlowSql" value="true"/>
    </bean>
    <bean id="log-filter" class="com.alibaba.druid.filter.logging.Log4jFilter">
        <property name="statementLogErrorEnabled" value="true"/>
    </bean>

    <bean id="dataSource" class="org.hqf.tutorials.spring.DynamicDataSource">
        <property name="targetDataSources">
            <map>
                <entry key="slave" value-ref="slaveDataSource"/>
                <!--<entry key="goldMaster" value-ref="goldMasterDataSource"/>-->
                <!--<entry key="goldSlave" value-ref="goldSlaveDataSource"/>-->
            </map>
        </property>
        <property name="defaultTargetDataSource" ref="masterDataSource"/>
    </bean>

    <!-- 配置Jdbc模板 -->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    <!-- 配置事务管理器 -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
          p:dataSource-ref="dataSource"/>

    <!-- 数据源切换类 -->
    <bean id="dataSourceChoose" class="org.hqf.tutorials.spring.interceptor.DataSourceChoose"/>

    <!-- 通过AOP配置提供事务增强，让service包下所有Bean的所有方法拥有事务 -->
    <aop:config proxy-target-class="true">
        <aop:pointcut id="serviceMethod"
                      expression=" execution(* org.hqf.tutorials.spring.service..*(..))"/>
        <aop:advisor pointcut-ref="serviceMethod" advice-ref="txAdvice"
                     order="2"/>
        <aop:aspect ref="dataSourceChoose" order="1">
            <aop:before method="before" pointcut-ref="serviceMethod"/>
        </aop:aspect>
    </aop:config>
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="*"/>
        </tx:attributes>
    </tx:advice>


</beans>